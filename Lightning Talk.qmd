---
title: "Lighning talk"
subtitle: "Developing a Carpentries-style Machine Learning workshop"
author: "Dr. Jens Brinkmann"
institute: "The University of Auckland"
# logo-container: "ResBaz_transparent_Logo_cropped.svg"
date: 17/10/2023
date-format: full
# bibliography: refs.bib
from: markdown+emoji
# embed-resources: false
format:
  revealjs:
    # number-sections: true
    theme: robot-lung2 2.scss
    # css: ./logo.css
    # disableLayout: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    transition: convex
    width: 1600
    height: 900
    margin: 0.2
    logo: "./UoALogoDarkBlueRGBLandscape.png"
    # background-image: ./ResBaz_transparent_Logo_cropped.svg
    # background-opacity: 0.5
    # background-position: bottom 10px right 20px
    # background-size: contain
    # data-background-repeat: no-repeat
    # background-size: 80px
    # background-repeat: no-repeat
    # background-position: 0% 100%
    # logo: ResBaz_transparent_cropped.svg
    # self_contained: false
    reveal_plugins: ["menu"]
    reveal_options:
      menu:
        numbers: true
    header: Developing a Carpentries-style Machine Learning workshop 
    # header-logo: UoALogoDarkBlueRGBLandscape.png
    hide-from-titleSlide: all
    filters:
      - reveal-header
      - line-highlight
editor:
  render-on-save: true
  # execute:
  #   echo: false
--- 
# to do
- think about more visualisations
- AI generated!
- some more video snippets?
- put a UoA banner and title on each slide (that was the plan of my GitHub Fork)



# Intro

- ML/AI are without a doubt a big topic
- Empowering reserachers to use relevant approaches in their work is very rewarding, but also challenging
- The Carpentries (LINK) offer a proven teaching style particularly targeted at participants with limited IT background
  - core aspects are live-coding, a positive attitude not anticipating prerequirments and participant invovlement
- The CeR (Centre for eResearch) at the University of Auckland acquired funding to further develop and run a series of workshops
- These are referred to as ML-Carp
- A significant deviation from the Carpentries material was the choice of Goolge Colab (picture) over local Python installs. The intention being: Focus efforts on the core/theory/underlying aspects of ML, avoid trouble-shooting and losing participants at various stages/during the workshop

# Composition of the week-long half-day workshop

- Afternoon 1 and 2: *Introduction to Python*
  - an existing and iteratively refined set of lessons 
- Afternoon 3 and 4: *Machine Learning*
  - while the Carpentries Incubator shows various (competing/overlapping) lessons in early stage (pre-alpha, alpha) exist, none of these has emerged to a more mature status
  - substantial rework was done (maybe show a git diff screenshot?)
- Afternoon 5: Deep Learning
  - a beta workshop existed in the Carpentries incubator
  - some refinement (git diff?)

# Run #1 (from day x to y)
-  Mainly statistics here (40 people, pie chart what faculty, ...)
-  takeaway message: various, most without background
-  some quotes
   -  very good
   -  limited breaks
   -  ...
-  observation: Even at the very end of the sessions, questions, participantion and interest didn't cease

## Metrics

:::: {.columns}

::: {.column width="50%"}

<!-- Pariticpants' Background -->
```{python}
import plotly.express as px
import pandas as pd
import plotly.io as pio

# Read data from the CSV file
df = pd.read_csv('./InputData.csv')
df = df.drop([0, 1])
df
option_counts = df['Q1'].value_counts()
# Create a DataFrame from the value_counts() result
option_counts_df = pd.DataFrame({'Option': option_counts.index, 'Count': option_counts.values})

# Display the result as a DataFrame
# print(option_counts_df)

fig = px.pie(option_counts_df, values='Count', names='Option')
fig.update_layout(
    title="Pariticpants' Background",
#     # xaxis_title="X Axis Title",
#     # yaxis_title="Y Axis Title",
#     # legend_title="Legend Title",
    font=dict(
        family="Verdana",
        size=18,
        # color="RebeccaPurple"
    )
)
fig.show()
```

:::

::: {.column width="50%"}
<!-- Pariticpants' Operating Systems -->
```{python}
import plotly.express as px
import pandas as pd
import numpy as np
import plotly.io as pio

# Read data from the CSV file
df = pd.read_csv('./InputData.csv')
df = df.drop([0, 1])
# df
option_counts = df['Q2'].value_counts()
# Create a DataFrame from the value_counts() result
option_counts_df = pd.DataFrame({'Option': option_counts.index, 'Count': option_counts.values})

# Display the result as a DataFrame
# print(option_counts_df)

fig = px.pie(option_counts_df, values='Count', names='Option')
fig.update_layout(
    title="Pariticpants' Operating System",
#     # xaxis_title="X Axis Title",
#     # yaxis_title="Y Axis Title",
#     # legend_title="Legend Title",
    font=dict(
        family="Verdana",
        size=18,
        # color="RebeccaPurple"
    )
)
fig.show()
```

:::

::::



## Plot 2
```{python}

import plotly.graph_objects as go
# df.describe()


# Create a box plot using Plotly
fig = go.Figure(data=[go.Box(y=df['Q3_1'],
                             boxpoints='all',   # can also be 'outliers', 'suspectedoutliers', or False
                             jitter=0.3,        # add some jitter for better separation between points
                             pointpos=-1.8      # relative position of points with respect to the box
                            )])

# Force Scale to 0-100
fig.update_layout(yaxis_range=[0,100])


# df['Q3_1'].apply(type).value_counts()
df['Q3_1'] = df['Q3_1'].astype(float)
mean_value = df.Q3_1.mean()
# print(df.Q3_1.mean())
median_value = df.Q3_1.median()



fig.update_layout(
    title="I felt comfortable learning in this workshop",
#     # xaxis_title="X Axis Title",
#     # yaxis_title="Y Axis Title",
#     # legend_title="Legend Title",
    font=dict(
        family="Verdana",
        size=18,
        # color="RebeccaPurple"
    )
)

# # Show the box plot
fig.show()
```
```{python}
import plotly.graph_objects as go
df2 = pd.read_csv('./InputData.csv')

# List of column names you want to plot
columns_to_plot = ['Q3_1', 'Q3_2', 'Q3_3', 'Q3_4', 'Q3_5', 'Q3_6']

# Convert the columns to float (if needed)
for column in columns_to_plot:
    df[column] = df[column].astype(float)

# String to be stripped from each element
string_to_strip = 'Please rate your level of agreement with the following statements (0 = complete disagreement, 100 = complete agreement). - '

# Strip the string from the column and print
df2['Column1'] = df2[column].str.replace(string_to_strip, '', case=False)  # case=False makes it case-insensitive
print(df)

# Create a subplot for each column
subplots = []
for column in columns_to_plot:
    subplot = go.Box(y=df[column],
                     boxpoints='all',   # can also be 'outliers', 'suspectedoutliers', or False
                     jitter=0.3,        # add some jitter for better separation between points
                     pointpos=-1.8,     # relative position of points with respect to the box
                     name=df2.loc[0,column]
                     )       # set the name for the legend
    subplots.append(subplot)



# Create a figure with subplots
fig = go.Figure(data=subplots)

# Force Scale to 0-100
fig.update_layout(yaxis_range=[0, 100])



# Customize the layout
fig.update_layout(
    title="Box Plots for Multiple Columns",
    xaxis_title="Columns",
    yaxis_title="Values",
    font=dict(
        family="Verdana",
        size=6,
    )
)

# Show the box plots
fig.show()
```
# Reflection on Run #1 and adaption
- The learning curve appeared too steep. From no coding to refined DL approaches in a few days appeared too challenging
  - (some) Python knowledge was made a prerequisite for the Run #2. That hasn't lead to a decline in registrations
  - Two (half) days of Python being removed from this run's curriculum freed up time to allow for more breaks, an even slower pace and answering more specific questions
- End of the run shouldn't imply ceasing communication with (most) participants
  - while some researchs continue to stay in touch with CeR after Run #1, to keep up the momentum of more participants, after the end of the workshop should be less of a cut and more 'faded out'
    - A curated set of links for self-study was deemed too generic with an anticipated low continued interst in fully self-motivated  
    - Slack sub channel with targeted support
    - Kaggle?
    - VSC and local Python/GPU/Nectar/... 
  
  # Comparing Run #1 and #2: What metrics and people say
  - what the numbers say 
    - more people signed up (word of mouth/positive experince being shared?)
    - more of this and that
  - what the pepole say
    - instrcutors/organisers (for the sake of bervity no full quotes)
      - better balance of topics (only ML, DL vs. having to cope with Python)
    - participants
      - ...

# Outlook
- while specific funding (for lesson preparation and delivery) has ended, the importance of the topic continues to increase
- more sessions are planned
- current Slack seems promising
- the decision to teach Python at SW Carp was deemed good



<!-- # test
```{ojs}
import {Plotly.js}
import { PieChartJS } from "./PieChartJS.js";
PieChartJS
``` -->


# test 2

<script src="https://cdnjs.cloudflare.com/ajax/libs/plotly.js/2.26.0/plotly.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/21.0.0/tween.umd.js"></script>
<div id="plot"></div>

<script>
  var data = [{
    values: [19, 26, 55],
    labels: ['Residential', 'Non-Residential', 'Utility'],
    pull: [0, 0, 0],
    type: 'pie',
    automargin: true
  }];

  var layout = {
    height: "100%",
    width: "100%"
  };

  var plot = document.getElementById('plot')
  Plotly.newPlot(plot, data, layout);

  window.tween = null;

  function tween_function(d, from=0, to=0.5) {
    var tweenValue = {pull: from}
    window.tween = new TWEEN.Tween(tweenValue, false)
    .to({pull: to}, 300)
    .easing(TWEEN.Easing.Quadratic.InOut)
    .onUpdate(() => {
      var pull = [0,0,0]
      pull[d.pointNumber] = tweenValue.pull
      d.data.pull = pull
      Plotly.restyle(plot, {
        marker: {
          pull: pull
        }
      });
    }).start()
  }

  function animate(time) {
    if (window.tween) {
      window.tween.update(time)
    }
    requestAnimationFrame(animate)
  }
  animate()

  plot.on('plotly_hover', function(data){
    //if (tween && tween.isPlaying()) return
    var d = data.points[0]
    tween_function(d)
  });

  plot.on('plotly_unhover', function(data) {
    if (tween && tween.isPlaying()) return
    var d = data.points[0]
    tween_function(d, 0.5, 0)
  })
</script>